x-airflow-common: &airflow-common
  build: 
    context: .
    dockerfile: Dockerfile
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__FERNET_KEY: ""
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB}
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB}
    AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
    AIRFLOW__LOGGING__BASE_LOG_FOLDER: /opt/airflow/logs
    AIRFLOW__LOGGING__REMOTE_LOGGING: False
    AIRFLOW__LOGGING__WORKER_LOG_SERVER_PORT: 8793
    AIRFLOW__LOGGING__LOGGING_LEVEL: INFO
    AIRFLOW__LOGGING__WORKER_LOG_SERVER_HOST: 127.0.0.1

    DB_NAME: ${DB_NAME}
    DB_USER: ${DB_USER}
    DB_PASSWORD: ${DB_PASSWORD}
    DB_HOST: ${DB_HOST}
    DB_PORT: ${DB_PORT}

    GOOGLE_APPLICATION_CREDENTIALS: ${GOOGLE_APPLICATION_CREDENTIALS}
    GMAIL_OAUTH2_CREDENTIALS: ${GMAIL_OAUTH2_CREDENTIALS}
    GMAIL_USER_EMAIL: ${GMAIL_USER_EMAIL}
    PUBSUB_USER_EMAIL: ${PUBSUB_USER_EMAIL}
    GOOGLE_CLOUD_PROJECT: ${GOOGLE_CLOUD_PROJECT}

    # PubSub Configuration
    PUBSUB_TOPIC_NAME: ${PUBSUB_TOPIC_NAME}
    PUBSUB_SUBSCRIPTION_NAME: ${PUBSUB_SUBSCRIPTION_NAME}

    # Email Monitoring
    TARGET_EMAIL: ${TARGET_EMAIL}

    # Airflow Configuration
    AIRFLOW_API_URL: ${AIRFLOW_API_URL}
    AIRFLOW_USERNAME: ${AIRFLOW_USERNAME}
    AIRFLOW_PASSWORD: ${AIRFLOW_PASSWORD}
    PROCESS_GMAIL_DAG_ID: ${PROCESS_GMAIL_DAG_ID}

    # OpenAI Configuration
    OPENAI_API_KEY: ${OPENAI_API_KEY}

    # Chrome Configuration
    CHROME_BIN: ${CHROME_BIN}
    CHROMEDRIVER_BIN: ${CHROMEDRIVER_BIN}

  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - ../config:/opt/airflow/config
    - ../src:/opt/src
    - ./downloads:/tmp
  user: "${AIRFLOW_UID:-50000}:0"
  networks:
    - kcap-network
  depends_on: &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    networks:
      - kcap-network
    restart: always

  redis:
    image: redis:7.2-bookworm
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    networks:
      - kcap-network
    restart: always

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", "airflow jobs check --job-type SchedulerJob --hostname $$(hostname)"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    restart: always

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        mkdir -p /opt/airflow/{logs,dags,plugins}
        chown -R "${AIRFLOW_UID}:0" /opt/airflow/{logs,dags,plugins}
        airflow db migrate && \
        airflow users create \
          --username ${_AIRFLOW_WWW_USER_USERNAME} \
          --password ${_AIRFLOW_WWW_USER_PASSWORD} \
          --firstname Admin \
          --lastname User \
          --role Admin \
          --email admin@example.com
    environment:
      <<: *airflow-common-env
    user: "0:0"

networks:
  kcap-network:
    driver: bridge

volumes:
  postgres-db-volume: